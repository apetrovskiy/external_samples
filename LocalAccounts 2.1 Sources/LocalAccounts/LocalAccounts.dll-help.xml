<?xml version="1.0" encoding="utf-8"?>

<helpItems xmlns="http://msh" schema="maml">

<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Add-LocalGroupMember</command:name>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Add</command:verb>
		<command:noun>LocalGroupMember</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para></maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Add-LocalGroupMember</maml:name>
			<command:parameter required = "true" variableLength = "true" globbing = "false" pipelineInput = "false" position = "2" >
				<maml:name>Members</maml:name>
				<maml:description>
					<maml:para>The members to add to the group. This filed takes the result of Get-LocalUser or Get-LocalGroup.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "true" >Principal[]</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The group name (SamAccountName) to read.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>Members</maml:name>
			<maml:description>
				<maml:para>The members to add to the group. This filed takes the result of Get-LocalUser or Get-LocalGroup.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Principal[]</command:parameterValue>
			<dev:type>
				<maml:name>Principal[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The group name (SamAccountName) to read.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; $user = Get-LocalUser -Name JohnD
PS C:\&gt; Get-LocalGroup -Name Administrators | Add-LocalGroupMember -Members $user</dev:code>
  			<dev:remarks>
				<maml:para>This command adds the local user 'JohnD' to the local administrators group.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: Member 'JohnD' has been added to group 'Administrators' on computer 'DEV1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; $group = Get-LocalGroup -Name &quot;Domain Admins&quot; -Source a
PS C:\&gt; Get-LocalGroup -Name Administrators | Add-LocalGroupMember -Members $group</dev:code>
  			<dev:remarks>
				<maml:para>This command adds the domain group 'Domain Admins' to the local administrators group.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: Member 'Domain Admins' has been added to group 'Administrators' on computer 'DEV1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 3 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; $newGroup = New-LocalGroup -Name TestGroup2 -Description Testing -PassThru
PS C:\&gt; $members = Get-LocalGroup -Name TestGroup1 | Get-LocalGroupMember
PS C:\&gt; $newGroup | Add-LocalGroupMember -Members $members</dev:code>
  			<dev:remarks>
				<maml:para>In this sample the new group 'TestGroup2' is created and the membership is copied from the 'TestGroup1'.

Of course this would also work remotely when using the parameter 'Source'.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: Member 'DevAdmin' has been added to group 'TestGroup2' on computer 'DEV1'
VERBOSE: Member 'Dev' has been added to group 'TestGroup2' on computer 'DEV1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Disable-LocalUser</command:name>
		<maml:description>
			<maml:para>Disables a local user account on the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Disable</command:verb>
		<command:noun>LocalUser</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This cmdlet disables a local user accounts for authentication on the local or remote machine. There is no return value if the action was successful, just a warning message is written to the console.

You can either specify the account by parameter or use the pipeline to pass user objects that have been retrieved using Get-LocalUser.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Disable-LocalUser</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The user name (SamAccountName) to disable.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The user name (SamAccountName) to disable.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the user to rename.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>Disable-LocalUser -Name JohnD</dev:code>
  			<dev:remarks>
				<maml:para>This disables the account 'JohnD' on the local system. Alternatively you can pipe the users to disable.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: User 'JohnD' on computer 'DEV1' has been disabled
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -All -Source asql1 | Where-Object { $_.Description -eq &quot;Testing&quot; } | Disable-LocalUser</dev:code>
  			<dev:remarks>
				<maml:para>This reads all accounts from the server 'asql1' and filters by the description. The result is passed to this cmdlet to disable all the test accounts.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: User 'Test1' on computer 'asql1' has been disabled
WARNING: User 'Test10' on computer 'asql1' has been disabled
WARNING: User 'Test2' on computer 'asql1' has been disabled
WARNING: User 'Test3' on computer 'asql1' has been disabled
WARNING: User 'Test4' on computer 'asql1' has been disabled
WARNING: User 'Test5' on computer 'asql1' has been disabled
WARNING: User 'Test6' on computer 'asql1' has been disabled
WARNING: User 'Test7' on computer 'asql1' has been disabled
WARNING: User 'Test8' on computer 'asql1' has been disabled
WARNING: User 'Test9' on computer 'asql1' has been disabled
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Enable-LocalUser</command:name>
		<maml:description>
			<maml:para>Enables a local user account on the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Enable</command:verb>
		<command:noun>LocalUser</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This cmdlet enables a local user accounts for authentication on the local or remote machine. There is no return value if the action was successful, just a warning message is written to the console.

You can either specify the account by parameter or use the pipeline to pass user objects that have been retrieved using Get-LocalUser.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Enable-LocalUser</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The user name (SamAccountName) to enable.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The user name (SamAccountName) to enable.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the user to rename.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>For examples see DisableLocalAccount</dev:code>
  			<dev:remarks>
				<maml:para>For examples see DisableLocalAccount</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Get-LocalAccountPolicy</command:name>
		<maml:description>
			<maml:para>Shows the user account policy of the given machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>LocalAccountPolicy</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This command commands reads one specific user from the machine specified and uses the information stored there to show the user account policy. It returns objects of the type System.DirectoryServices.AccountManagement.UserPrincipal.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Get-LocalAccountPolicy</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The user name (SamAccountName) to read.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The user name (SamAccountName) to read.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the user.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>LocalAccounts.LocalAccountPolicy</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>This object holds the account policy data.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalAccountPolicy -Name Administrator</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the local account policy by reading the data from the administrator account.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>MinPasswordLength          : 0
MaxPasswordAge             : 0
MinPasswordAge             : 0
PasswordHistoryLength      : 0
LockoutObservationInterval : 30
MaxBadPasswordsAllowed     : 0
AutoUnlockInterval         : 30
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; (Get-LocalUser -All)[0] | Get-LocalAccountPolicy</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the local account policy by reading the data from the first user account found on the system.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>MinPasswordLength          : 0
MaxPasswordAge             : 0
MinPasswordAge             : 0
PasswordHistoryLength      : 0
LockoutObservationInterval : 30
MaxBadPasswordsAllowed     : 0
AutoUnlockInterval         : 30
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 3 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalAccountPolicy -Name administrator -Source asql1</dev:code>
  			<dev:remarks>
				<maml:para>The same example again, this time the data is retrieved from a remote system.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>MinPasswordLength          : 0
MaxPasswordAge             : 0
MinPasswordAge             : 0
PasswordHistoryLength      : 0
LockoutObservationInterval : 30
MaxBadPasswordsAllowed     : 0
AutoUnlockInterval         : 30
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Get-LocalGroup</command:name>
		<maml:description>
			<maml:para>Gets a specific or all local groups from the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>LocalGroup</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This command commands reads one specific or all groups from the machine specified. It returns objects of the type System.DirectoryServices.AccountManagement.GroupPrincipal.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Get-LocalGroup</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The group name (SamAccountName) to read.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-LocalGroup</maml:name>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "false" position = "named" >
				<maml:name>All</maml:name>
				<maml:description>
					<maml:para>Returns all user accounts.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The group name (SamAccountName) to read.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>All</maml:name>
			<maml:description>
				<maml:para>Returns all user accounts.</maml:para>
			</maml:description>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the group.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.DirectoryServices.AccountManagement.GroupPrincipal</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>This object holds the user data. This is a standard class of .net 3.5.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalGroup -All</dev:code>
  			<dev:remarks>
				<maml:para>This command reads all local groups from the local machine.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name                            Member Count Server Description                          
----                            ------------ ------ -----------                          
Administrators                  4            DEV1   Administrators have complete and u...
Backup Operators                0            DEV1   Backup Operators can override secu...
Cryptographic Operators         0            DEV1   Members are authorized to perform ...
Distributed COM Users           0            DEV1   Members are allowed to launch, act...
...
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalGroup -All -Source asql1 | Where-Object { $_.MemberCount }</dev:code>
  			<dev:remarks>
				<maml:para>This command reads all local groups of the server 'asql1' and filters out all groups that do not have any members.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name                                    Member Count Server Description                  
----                                    ------------ ------ -----------                  
Administrators                          2            asql1  Administrators have comple...
Guests                                  1            asql1  Guests have the same acces...
Users                                   3            asql1  Users are prevented from m...
SQLServer2005SQLBrowserUser$ASQL1       1            asql1  Members in the group have ...
SQLServerMSSQLServerADHelperUser$ASQL1  2            asql1  Members in the group have ...
SQLServerMSSQLUser$ASQL1$MSSQLSERVER    1            asql1  Members in the group have ...
SQLServerSQLAgentUser$ASQL1$MSSQLSERVER 1            asql1  Members in the group have ...
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Get-LocalGroupMember</command:name>
		<maml:description>
			<maml:para>Gets a all members of the specific local group from the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>LocalGroupMember</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This command commands reads all members of the specific group from the machine specified. It returns objects of the type System.DirectoryServices.AccountManagement.GroupPrincipal.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Get-LocalGroupMember</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The group name (SamAccountName) to read.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The group name (SamAccountName) to read.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the group.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.DirectoryServices.AccountManagement.GroupPrincipal and System.DirectoryServices.AccountManagement.UserPrincipal</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>This object holds the member data. This is a standard class of .net 3.5.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>FORMAT ISSUE: If the command returns users and groups PowerShell chooses the format depending on the first item. For example, if the first object is a user account it gets displayed as expected. However groups are displayed in the standard list format.

Please use Format-Table to work around that issue.</maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalGroup -Name Administrators | Get-LocalGroupMember</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves all members of the local administrators group.

See the notes for more information about the format issue.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name          FullName Server Enabled Locked Out Description
----          -------- ------ ------- ---------- -----------
Administrator          DEV1   False   False      Built-in account for administering th...
user1                  DEV1   True    False
user2                  DEV1   True    False

IsSecurityGroup       : True
GroupScope            : Global
Members               : {Administrator, DevAdmin}
Context               : System.DirectoryServices.AccountManagement.PrincipalContext
ContextType           : Domain
Description           : Designated administrators of the domain
DisplayName           :
SamAccountName        : Domain Admins
UserPrincipalName     :
Sid                   : S-1-5-21-2575558460-627736179-792495994-512
Guid                  : 63405fe4-91e8-4bd8-bec2-e04e9652a4d2
DistinguishedName     : CN=Domain Admins,CN=Users,DC=a,DC=vm,DC=net
StructuralObjectClass : group
Name                  : Domain Admins
Server                : ADC1.a.vm.net
MemberCount           : 2
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalGroup -Name TestGroup1 -Source asql1 | Get-LocalGroupMember</dev:code>
  			<dev:remarks>
				<maml:para>This command reads the members of the 'TestGroup1' on machine asql1.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name          FullName Server        Enabled Locked Out Description
----          -------- ------        ------- ---------- -----------
Administrator          asql1         True    False      Built-in account for administe...
DevAdmin      DevAdmin ADC1.a.vm.net True    False
Dev           Dev      ADC1.a.vm.net True    False
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Get-LocalUser</command:name>
		<maml:description>
			<maml:para>Gets a specific or all local users from the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>LocalUser</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This command commands reads one specific or all users from the machine specified. It returns objects of the type System.DirectoryServices.AccountManagement.UserPrincipal.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Get-LocalUser</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The user name (SamAccountName) to read.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-LocalUser</maml:name>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "false" position = "named" >
				<maml:name>All</maml:name>
				<maml:description>
					<maml:para>Returns all user accounts.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The user name (SamAccountName) to read.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>All</maml:name>
			<maml:description>
				<maml:para>Returns all user accounts.</maml:para>
			</maml:description>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the user.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.DirectoryServices.AccountManagement.UserPrincipal</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>This object holds the user data. This is a standard class of .net 3.5.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -Name Administrator</dev:code>
  			<dev:remarks>
				<maml:para>Reads just one user from the local machine.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name          FullName Server    Enabled Locked Out Description
----          -------- ------    ------- ---------- -----------
Administrator          RAANDREE0 False   False      Built-in account for administering the computer/domain
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -All -Source asql1</dev:code>
  			<dev:remarks>
				<maml:para>This command returns all users from the system 'asql1'.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name          FullName Server Enabled Locked Out Description
----          -------- ------ ------- ---------- -----------
Administrator          asql1  True    False      Built-in account for administering the computer/domain
Guest                  asql1  False   False      Built-in account for guest access to the computer/domain
JohnD         John Doe asql1  True    False      Test
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 3 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -All -Source asql1 | Where-Object { $_.Description -eq &quot;Test&quot; }</dev:code>
  			<dev:remarks>
				<maml:para>Returns all users that have the string &quot;Test&quot; in their description field. Of course you can filter by any property you want.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name  FullName Server Enabled Locked Out Description
----  -------- ------ ------- ---------- -----------
JohnD John Doe asql1  True    False      Test
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>New-LocalGroup</command:name>
		<maml:description>
			<maml:para>Creates a new local group on the local or remote system.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>LocalGroup</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>The cmdlet creates new local group on the local or remote system. The only required information is the SamAccountName of the new group.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>New-LocalGroup</maml:name>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "false" position = "named" >
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The SamAccountName for this group principal.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
			</maml:description>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The SamAccountName for this group principal.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the new group.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Null, unless the parameter PassThru is used.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>System.DirectoryServices.AccountManagement.GroupPrincipal. This object contains all information of the new group account.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; New-LocalGroup -Name TestGroup1 -Description Testing -PassThru</dev:code>
  			<dev:remarks>
				<maml:para>This creates a local group on the local machine.

As PassThru is used the cmdlet returns an object for the new group.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name       Server Description
----       ------ -----------
TestGroup1 DEV1   Testing
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; New-LocalUser -Name SueJ -FullName &quot;Sue Jones&quot; -Password Test1234 -Description &quot;Test User&quot; -MustChangePasswordAtNextLogon -HomeDirectory \\afs1\profiles\SueJ -HomeDirectoryDrive h: -PassThru</dev:code>
  			<dev:remarks>
				<maml:para>Here we create a user local user account. The user has to change the password at next logon. Additionally the home drive is mapped to the home path.

As PassThru is used the cmdlet returns an object for the new user.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name FullName  Server Enabled Locked Out Description
---- --------  ------ ------- ---------- -----------
SueJ Sue Jones DEV1   True    False      Test User
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 3 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; 1..10 | ForEach-Object { New-LocalUser -Name &quot;Test_$_&quot; -Description &quot;Testing&quot; -Password Password1 -PassThru }</dev:code>
  			<dev:remarks>
				<maml:para>If you need test users on another machine this one-liner creates 10 test users on the machine 'asql1'.

As PassThru is used the cmdlet returns an object for the new user.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name    FullName Server Enabled Locked Out Description
----    -------- ------ ------- ---------- -----------
Test_1  Test_1   DEV1   True    False      Testing
Test_2  Test_2   DEV1   True    False      Testing
Test_3  Test_3   DEV1   True    False      Testing
Test_4  Test_4   DEV1   True    False      Testing
Test_5  Test_5   DEV1   True    False      Testing
Test_6  Test_6   DEV1   True    False      Testing
Test_7  Test_7   DEV1   True    False      Testing
Test_8  Test_8   DEV1   True    False      Testing
Test_9  Test_9   DEV1   True    False      Testing
Test_10 Test_10  DEV1   True    False      Testing
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>New-LocalUser</command:name>
		<maml:description>
			<maml:para>Creates a new local user account on the local or remote system.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>LocalUser</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>The cmdlet creates new local user accounts on the local or remote system. The only required information is the SamAccountName and the password of the new user account. All other information is optional.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>New-LocalUser</maml:name>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>FullName</maml:name>
				<maml:description>
					<maml:para>Specifies the display (Full Name) name of the object.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "false" position = "named" >
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Password</maml:name>
				<maml:description>
					<maml:para>The password for this account.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>MustChangePasswordAtNextLogon</maml:name>
				<maml:description>
					<maml:para>Expires the password for this account. This will force the user to change his/her password at the next logon.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>IsDisabled</maml:name>
				<maml:description>
					<maml:para>If true the principal is disabled for authentication.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>ProfilePath</maml:name>
				<maml:description>
					<maml:para>The path to the user profile. This can be a local or UNC path.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>LogonScript</maml:name>
				<maml:description>
					<maml:para>A path of the script for this account, or null if there is no script path.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>HomeDirectoryDrive</maml:name>
				<maml:description>
					<maml:para>The home drive for the account, or null if no home drive exists.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>HomeDirectory</maml:name>
				<maml:description>
					<maml:para>The home directory for this account, or null if no home directory exists.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The SamAccountName for this user principal.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>New-LocalUser</maml:name>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>FullName</maml:name>
				<maml:description>
					<maml:para>Specifies the display (Full Name) name of the object.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "false" position = "named" >
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Password</maml:name>
				<maml:description>
					<maml:para>The password for this account.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>CannotChangePassword</maml:name>
				<maml:description>
					<maml:para>If true the user is not permitted to change the password.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>PasswordNeverExpires</maml:name>
				<maml:description>
					<maml:para>If true the password never expires for this account.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>IsDisabled</maml:name>
				<maml:description>
					<maml:para>If true the principal is disabled for authentication.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>ProfilePath</maml:name>
				<maml:description>
					<maml:para>The path to the user profile. This can be a local or UNC path.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>LogonScript</maml:name>
				<maml:description>
					<maml:para>A path of the script for this account, or null if there is no script path.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>HomeDirectoryDrive</maml:name>
				<maml:description>
					<maml:para>The home drive for the account, or null if no home drive exists.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>HomeDirectory</maml:name>
				<maml:description>
					<maml:para>The home directory for this account, or null if no home directory exists.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The SamAccountName for this user principal.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>FullName</maml:name>
			<maml:description>
				<maml:para>Specifies the display (Full Name) name of the object.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
			</maml:description>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Password</maml:name>
			<maml:description>
				<maml:para>The password for this account.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>MustChangePasswordAtNextLogon</maml:name>
			<maml:description>
				<maml:para>Expires the password for this account. This will force the user to change his/her password at the next logon.</maml:para>
			</maml:description>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>IsDisabled</maml:name>
			<maml:description>
				<maml:para>If true the principal is disabled for authentication.</maml:para>
			</maml:description>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ProfilePath</maml:name>
			<maml:description>
				<maml:para>The path to the user profile. This can be a local or UNC path.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>LogonScript</maml:name>
			<maml:description>
				<maml:para>A path of the script for this account, or null if there is no script path.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomeDirectoryDrive</maml:name>
			<maml:description>
				<maml:para>The home drive for the account, or null if no home drive exists.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomeDirectory</maml:name>
			<maml:description>
				<maml:para>The home directory for this account, or null if no home directory exists.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The SamAccountName for this user principal.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>CannotChangePassword</maml:name>
			<maml:description>
				<maml:para>If true the user is not permitted to change the password.</maml:para>
			</maml:description>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>PasswordNeverExpires</maml:name>
			<maml:description>
				<maml:para>If true the password never expires for this account.</maml:para>
			</maml:description>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName and password of the new user.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Null, unless the parameter PassThru is used.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>System.DirectoryServices.AccountManagement.UserPrincipal. This object contains all information of the new user account.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; New-LocalUser -Name JohnD -FullName &quot;John Doe&quot; -Password Test1234 -PassThru</dev:code>
  			<dev:remarks>
				<maml:para>This creates a local user account on the local machine. Just the display name (full name) is defined.

As PassThru is used the cmdlet returns an object for the new user.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name  FullName Server Enabled Locked Out Description
----  -------- ------ ------- ---------- -----------
JohnD John Doe DEV1   True    False
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; 1..10 | ForEach-Object { New-LocalGroup -Name &quot;TestGroup_$_&quot; -Source asql1 -PassThru }</dev:code>
  			<dev:remarks>
				<maml:para>If you need test groups on another machine this one-liner creates 10 test groups on the machine 'asql1'.

As PassThru is used the cmdlet returns an object for the new user.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>Name         Server Description
----         ------ -----------
TestGroup_1  asql1
TestGroup_2  asql1
TestGroup_3  asql1
TestGroup_4  asql1
TestGroup_5  asql1
TestGroup_6  asql1
TestGroup_7  asql1
TestGroup_8  asql1
TestGroup_9  asql1
TestGroup_10 asql1
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Remove-LocalGroup</command:name>
		<maml:description>
			<maml:para>Removes a local group from the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>LocalGroup</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This cmdlet removes groups from the local or remote machine. There is no return value if the delete was successful, just a warning message is written to the console.

You can either specify the account by parameter or use the pipeline to pass user objects that have been retrieved using Get-LocalGroup.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Remove-LocalGroup</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The SamAccountName for this group principal.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The SamAccountName for this group principal.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the group to remove.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Remove-LocalGroup -Name TestGroup1</dev:code>
  			<dev:remarks>
				<maml:para>Deletes the user 'TestGroup1' from the local machine.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: User 'TestGroup1' has been removed from machine 'DEV1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalGroup -Name TestGroup1 | Remove-LocalGroup</dev:code>
  			<dev:remarks>
				<maml:para>Deletes the user 'TestGroup1' from the local machine. This demonstrates how to combine Get-LocalGroup and Remove-LocalGroup</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: User 'TestGroup1' has been removed from machine 'DEV1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Remove-LocalGroupMember</command:name>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>LocalGroupMember</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para></maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Remove-LocalGroupMember</maml:name>
			<command:parameter required = "true" variableLength = "true" globbing = "false" pipelineInput = "false" position = "2" >
				<maml:name>Members</maml:name>
				<maml:description>
					<maml:para>The members to remove from the group. This filed takes the result of Get-LocalUser or Get-LocalGroup.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "true" >Principal[]</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The group name (SamAccountName) to read.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>Members</maml:name>
			<maml:description>
				<maml:para>The members to remove from the group. This filed takes the result of Get-LocalUser or Get-LocalGroup.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Principal[]</command:parameterValue>
			<dev:type>
				<maml:name>Principal[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The group name (SamAccountName) to read.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; $user = Get-LocalUser -Name JohnD
PS C:\&gt; Get-LocalGroup -Name Administrators | Remove-LocalGroupMember -Members $user</dev:code>
  			<dev:remarks>
				<maml:para>This command removes the user 'JohnD' from the local administrators group.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: Member 'JohnD' has been removed from group 'Administrators' on computer 'DEV1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; $members = Get-LocalGroup -Name TestGroup2 -Source asql1 | Get-LocalGroupMember
PS C:\&gt; Get-LocalGroup -Name TestGroup1 -Source asql1 | Remove-LocalGroupMember -Members $members</dev:code>
  			<dev:remarks>
				<maml:para>This sample removes all members of 'TestGroup2' from 'TestGroup1'. The operation is done remotely on the system 'asql1'.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: Member 'DfsShareMgmt' has been removed from group 'TestGroup1' on computer 'asql1'
VERBOSE: Member 'DfsFileAdmin' has been removed from group 'TestGroup1' on computer 'asql1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Remove-LocalUser</command:name>
		<maml:description>
			<maml:para>Removes a local user account from the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>LocalUser</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This cmdlet removes local user accounts from the local or remote machine. There is no return value if the delete was successful, just a warning message is written to the console.

You can either specify the account by parameter or use the pipeline to pass user objects that have been retrieved using Get-LocalUser.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Remove-LocalUser</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The SamAccountName for this user principal.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The SamAccountName for this user principal.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the user to remove.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Remove-LocalUser -Name JohnD</dev:code>
  			<dev:remarks>
				<maml:para>Deletes the user 'JohnD' from the local machine.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: User 'JohnD' has been removed from machine 'DEV1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -Name JohnD | Remove-LocalUser</dev:code>
  			<dev:remarks>
				<maml:para>Deletes the user 'JohnD' from the local machine. This demonstrates how to combine Get-LocalUser and Remove-LocalUser</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: User 'JohnD' has been removed from machine 'DEV1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 3 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -All -Source asql1 | Where-Object { $_.Description -eq &quot;Testing&quot; } | Remove-LocalUser</dev:code>
  			<dev:remarks>
				<maml:para>Here we read all users from the machine 'asql1' and filter them by the description. The result is passed to Remove-LocalUser so all there accounts are deleted.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: User 'Test_1' has been removed from machine 'asql1'
WARNING: User 'Test_10' has been removed from machine 'asql1
WARNING: User 'Test_2' has been removed from machine 'asql1'
WARNING: User 'Test_3' has been removed from machine 'asql1'
WARNING: User 'Test_4' has been removed from machine 'asql1'
WARNING: User 'Test_5' has been removed from machine 'asql1'
WARNING: User 'Test_6' has been removed from machine 'asql1'
WARNING: User 'Test_7' has been removed from machine 'asql1'
WARNING: User 'Test_8' has been removed from machine 'asql1'
WARNING: User 'Test_9' has been removed from machine 'asql1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Rename-LocalGroup</command:name>
		<maml:description>
			<maml:para>Renames a local group on the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Rename</command:verb>
		<command:noun>LocalGroup</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This cmdlet renames a local group on the local or remote machine. There is no return value if the delete was successful, just a warning message is written to the console.

You can either specify the account by parameter or use the pipeline to pass user objects that have been retrieved using Get-LocalGroup.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Rename-LocalGroup</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>NewName</maml:name>
				<maml:description>
					<maml:para>The new SamAccountName of the group.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The SamAccountName for this group principal.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>NewName</maml:name>
			<maml:description>
				<maml:para>The new SamAccountName of the group.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The SamAccountName for this group principal.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the group to rename.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Rename-LocalGroup -Name TestProject -NewName Project1</dev:code>
  			<dev:remarks>
				<maml:para>This renames the local account 'TestProject' into 'Project1'.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: Group 'TestProject1' on computer 'DEV1' has been renamed to 'Project1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalGroup -Name TestProject | Rename-LocalUser -NewName Project1</dev:code>
  			<dev:remarks>
				<maml:para>This renames the local account 'TestProject' into 'Project1'. This demonstrates how to combine Get-LocalGroup and Rename-LocalGroup.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: Group 'TestProject1' on computer 'DEV1' has been renamed to 'Project1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Rename-LocalUser</command:name>
		<maml:description>
			<maml:para>Renames a local user account on the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Rename</command:verb>
		<command:noun>LocalUser</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This cmdlet renames a local user accounts on the local or remote machine. There is no return value if the delete was successful, just a warning message is written to the console.

You can either specify the account by parameter or use the pipeline to pass user objects that have been retrieved using Get-LocalUser.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Rename-LocalUser</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>NewName</maml:name>
				<maml:description>
					<maml:para>The new SamAccountName of the user account.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The SamAccountName for this user principal.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>NewName</maml:name>
			<maml:description>
				<maml:para>The new SamAccountName of the user account.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The SamAccountName for this user principal.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the user to rename.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Rename-LocalUser -Name SueJ -NewName SueJones</dev:code>
  			<dev:remarks>
				<maml:para>This renames the local account 'SueJ' into 'SueJones'.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: User 'SueJ' on computer 'DEV1' has been renamed to 'SueJones'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -Name SueJ | Rename-LocalUser -NewName SueJones</dev:code>
  			<dev:remarks>
				<maml:para>This renames the local account 'SueJ' into 'SueJones'. This demonstrates how to combine Get-LocalUser and Rename-LocalUser.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: User 'SueJ' on computer 'DEV1' has been renamed to 'SueJones'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 3 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -All -Source asql1 | Where-Object { $_.Description -eq &quot;Testing&quot; } | ForEach-Object { $_ | Rename-LocalUser -NewName $_.Name.Replace(&quot;_&quot;, &quot;&quot;) }</dev:code>
  			<dev:remarks>
				<maml:para>Here we read all accounts from the server 'sql1' and filtering for the test accounts. Then we iterate over the accounts and rename each account by removing the underscore in the name. For that we use the method 'replace' of the string class.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>WARNING: User 'Test_1' on computer 'asql1' has been renamed to 'Test1'
WARNING: User 'Test_10' on computer 'asql1' has been renamed to 'Test10
WARNING: User 'Test_2' on computer 'asql1' has been renamed to 'Test2'
WARNING: User 'Test_3' on computer 'asql1' has been renamed to 'Test3'
WARNING: User 'Test_4' on computer 'asql1' has been renamed to 'Test4'
WARNING: User 'Test_5' on computer 'asql1' has been renamed to 'Test5'
WARNING: User 'Test_6' on computer 'asql1' has been renamed to 'Test6'
WARNING: User 'Test_7' on computer 'asql1' has been renamed to 'Test7'
WARNING: User 'Test_8' on computer 'asql1' has been renamed to 'Test8'
WARNING: User 'Test_9' on computer 'asql1' has been renamed to 'Test9'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Set-LocalGroup</command:name>
		<maml:description>
			<maml:para>Sets a local group on the local or remote system.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>LocalGroup</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>The cmdlet set a local group on the local or remote system. The only required information is the SamAccountName of the group.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Set-LocalGroup</maml:name>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "false" position = "named" >
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The SamAccountName for this group principal.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
			</maml:description>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The SamAccountName for this group principal.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the group.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Null, unless the parameter PassThru is used.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>System.DirectoryServices.AccountManagement.GroupPrincipal. This object contains all information of the new group account.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalGroup -Name Admins | Set-LocalGroup -Description &quot;Custom Admin Group&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command sets the description of the group 'Admins' to 'Custom Admin Group'.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: Group 'Admins' on computer 'DEV1' has been set
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Set-LocalUser</command:name>
		<maml:description>
			<maml:para>Sets a local user on the local or remote system.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>LocalUser</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>The cmdlet set a local user on the local or remote system. The only required information is the SamAccountName of the user.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Set-LocalUser</maml:name>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>FullName</maml:name>
				<maml:description>
					<maml:para>Specifies the display (Full Name) name of the object.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "false" position = "named" >
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>MustChangePasswordAtNextLogon</maml:name>
				<maml:description>
					<maml:para>Expires the password for this account. This will force the user to change his/her password at the next logon.</maml:para>
				</maml:description>
			<command:parameterValue required="false" variableLength = "false" >Boolean</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>ProfilePath</maml:name>
				<maml:description>
					<maml:para>The path to the user profile. This can be a local or UNC path.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>LogonScript</maml:name>
				<maml:description>
					<maml:para>A path of the script for this account, or null if there is no script path.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>HomeDirectoryDrive</maml:name>
				<maml:description>
					<maml:para>The home drive for the account, or null if no home drive exists.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>HomeDirectory</maml:name>
				<maml:description>
					<maml:para>The home directory for this account, or null if no home directory exists.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The SamAccountName for this user principal.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-LocalUser</maml:name>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>FullName</maml:name>
				<maml:description>
					<maml:para>Specifies the display (Full Name) name of the object.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "false" position = "named" >
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>Specifies a description of the object.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>CannotChangePassword</maml:name>
				<maml:description>
					<maml:para>If true the user is not permitted to change the password.</maml:para>
				</maml:description>
			<command:parameterValue required="false" variableLength = "false" >Boolean</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>PasswordNeverExpires</maml:name>
				<maml:description>
					<maml:para>If true the password never expires for this account.</maml:para>
				</maml:description>
			<command:parameterValue required="false" variableLength = "false" >Boolean</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>ProfilePath</maml:name>
				<maml:description>
					<maml:para>The path to the user profile. This can be a local or UNC path.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>LogonScript</maml:name>
				<maml:description>
					<maml:para>A path of the script for this account, or null if there is no script path.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>HomeDirectoryDrive</maml:name>
				<maml:description>
					<maml:para>The home drive for the account, or null if no home drive exists.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>HomeDirectory</maml:name>
				<maml:description>
					<maml:para>The home directory for this account, or null if no home directory exists.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The SamAccountName for this user principal.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>FullName</maml:name>
			<maml:description>
				<maml:para>Specifies the display (Full Name) name of the object.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>Returns the new or modified object. By default (i.e. if -PassThru is not specified), this cmdlet does not generate any output.</maml:para>
			</maml:description>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the object.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>MustChangePasswordAtNextLogon</maml:name>
			<maml:description>
				<maml:para>Expires the password for this account. This will force the user to change his/her password at the next logon.</maml:para>
			</maml:description>
			<command:parameterValue required="false" variableLength="false">Boolean</command:parameterValue>
			<dev:type>
				<maml:name>Boolean</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ProfilePath</maml:name>
			<maml:description>
				<maml:para>The path to the user profile. This can be a local or UNC path.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>LogonScript</maml:name>
			<maml:description>
				<maml:para>A path of the script for this account, or null if there is no script path.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomeDirectoryDrive</maml:name>
			<maml:description>
				<maml:para>The home drive for the account, or null if no home drive exists.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>HomeDirectory</maml:name>
			<maml:description>
				<maml:para>The home directory for this account, or null if no home directory exists.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The SamAccountName for this user principal.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>CannotChangePassword</maml:name>
			<maml:description>
				<maml:para>If true the user is not permitted to change the password.</maml:para>
			</maml:description>
			<command:parameterValue required="false" variableLength="false">Boolean</command:parameterValue>
			<dev:type>
				<maml:name>Boolean</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>PasswordNeverExpires</maml:name>
			<maml:description>
				<maml:para>If true the password never expires for this account.</maml:para>
			</maml:description>
			<command:parameterValue required="false" variableLength="false">Boolean</command:parameterValue>
			<dev:type>
				<maml:name>Boolean</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the user.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Null, unless the parameter PassThru is used.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>System.DirectoryServices.AccountManagement.UserPrincipal. This object contains all information of the new group account.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -Name JohnD | Set-LocalUser -Description Testing -MustChangePasswordAtNextLogon $true -ProfilePath \\afs1\profiles\JohnD -PassThru</dev:code>
  			<dev:remarks>
				<maml:para>The command sets the description and the profile path on the user account. Also the user has to change the password at next logon.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: User 'JohnD' on computer 'DEV1' has been set

Name  FullName Server Enabled Locked Out Description
----  -------- ------ ------- ---------- -----------
JohnD John Doe DEV1   True    False      Testing
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -Source asql1 -All | Where-Object { $_.Description -eq &quot;Testing&quot; } | ForEach-Object { $_ | Set-LocalUser -HomeDirectoryDrive h: -HomeDirectory &quot;\\afs1\homes\$($_.Name)&quot; -ProfilePath &quot;\\afs1\profiles\$($_.Name)&quot; -PassThru }</dev:code>
  			<dev:remarks>
				<maml:para>This command takes all test users on the machine 'asql1' and sets the profile path and the home directory dynamically depending on the user's SamAccountName. Also the home drive is assigned.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: User 'Test1' on computer 'asql1' has been set
VERBOSE: User 'Test10' on computer 'asql1' has been set
VERBOSE: User 'Test2' on computer 'asql1' has been set
...

Name   FullName Server Enabled Locked Out Description
----   -------- ------ ------- ---------- -----------
Test1  Test_1   asql1  False   False      Testing
Test10 Test_10  asql1  False   False      Testing
Test2  Test_2   asql1  False   False      Testing
...
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 3 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -Source asql1 -All | Where-Object { $_.Description -eq &quot;Testing&quot; } | Set-LocalUser -HomeDirectoryDrive &quot;&quot; -HomeDirectory &quot;&quot; -ProfilePath &quot;&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command clears the home drive, home directory and the profile path on all test users on the server 'asql1'.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: User 'Test1' on computer 'asql1' has been set
VERBOSE: User 'Test10' on computer 'asql1' has been set
VERBOSE: User 'Test2' on computer 'asql1' has been set
...
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Set-LocalUserPassword</command:name>
		<maml:description>
			<maml:para>Enables a local user account on the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>LocalUserPassword</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This cmdlet unlocks a local user accounts on the local or remote machine. There is no return value if the action was successful, just a warning message is written to the console.

You can either specify the account by parameter or use the pipeline to pass user objects that have been retrieved using Get-LocalUser.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Set-LocalUserPassword</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>NewPassword</maml:name>
				<maml:description>
					<maml:para>The new password for the user account.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The user name (SamAccountName) to set the password for.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>NewPassword</maml:name>
			<maml:description>
				<maml:para>The new password for the user account.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The user name (SamAccountName) to set the password for.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the user to rename.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -Name Test_1 | Set-LocalUserPassword -NewPassword Test1234</dev:code>
  			<dev:remarks>
				<maml:para>This command sets a new password for the user account 'Test_1&quot;.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: Password for user 'Test_1' on computer 'DEV1' has been set
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
--------------  EXAMPLE 2 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\p&gt; Get-LocalUser -All -Source asql1 | Where-Object { $_.Description -eq &quot;Testing&quot; } | Set-LocalUserPassword -Password Test1234</dev:code>
  			<dev:remarks>
				<maml:para>This command gets all test accounts from the server 'asql1'. The result is passed to Set-LocalUserPassword and a new password is set for all test accounts.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: Password for user 'Test1' on computer 'asql1' has been set
VERBOSE: Password for user 'Test10' on computer 'asql1' has been set
VERBOSE: Password for user 'Test2' on computer 'asql1' has been set
VERBOSE: Password for user 'Test3' on computer 'asql1' has been set
VERBOSE: Password for user 'Test4' on computer 'asql1' has been set
VERBOSE: Password for user 'Test5' on computer 'asql1' has been set
VERBOSE: Password for user 'Test6' on computer 'asql1' has been set
VERBOSE: Password for user 'Test7' on computer 'asql1' has been set
VERBOSE: Password for user 'Test8' on computer 'asql1' has been set
VERBOSE: Password for user 'Test9' on computer 'asql1' has been set
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Unkown</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
<!--Generated by Help Cmdlet Editor-->
	<command:details>
		<command:name>Unlock-LocalUser</command:name>
		<maml:description>
			<maml:para>Enables a local user account on the local or remote machine.</maml:para>
		</maml:description>
		<maml:copyright>
           <maml:para />
		<!--Add copy right info here.-->
		</maml:copyright>
		<command:verb>Unlock</command:verb>
		<command:noun>LocalUser</command:noun>
		<!--Add Dev version info here.-->
		<dev:version />
	</command:details>
	<maml:description>
	<!--This is the Description section-->
		<maml:para>This cmdlet unlocks a local user accounts on the local or remote machine. There is no return value if the action was successful, just a warning message is written to the console.

You can either specify the account by parameter or use the pipeline to pass user objects that have been retrieved using Get-LocalUser.</maml:para>
	</maml:description>
	<command:syntax>		<command:syntaxItem>
			<maml:name>Unlock-LocalUser</maml:name>
			<command:parameter required = "true" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "1" >
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The user name (SamAccountName) to unlock.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "2" >
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >String</command:parameterValue>
			</command:parameter>
			<command:parameter required = "false" variableLength = "false" globbing = "false" pipelineInput = "true (ByPropertyName)" position = "named" >
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
				</maml:description>
			<command:parameterValue required="true" variableLength = "false" >PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The user name (SamAccountName) to unlock.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Source</maml:name>
			<maml:description>
				<maml:para>Specifies the target computers. This parameter takes a FQDN, NetBIOS name or IP address.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user.

To specify this parameter, you can type a user name, such as &quot;User1&quot; or &quot;Domain01\User01&quot; or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.

You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.
  
  $AdminCredentials = Get-Credential &quot;Domain01\User01&quot;

The following shows how to set the Credential parameter to these credentials.
  
  -Credential $AdminCredentials

If the acting credentials do not have permission to perform the task, the command returns a non-terminating error but skips the command execution.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>The SamAccountName of the user to rename.</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors>
	</command:terminatingErrors>
	<command:nonTerminatingErrors>
	</command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>
--------------  EXAMPLE 1 --------------			</maml:title>
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
C:\PS&gt;			</maml:introduction>
  			<dev:code>PS C:\&gt; Get-LocalUser -Name user2 | Unlock-LocalUser</dev:code>
  			<dev:remarks>
				<maml:para>This command disables the user account 'user2'.</maml:para>
				<maml:para></maml:para>
				<maml:para></maml:para>
				<maml:para>VERBOSE: User 'user2' has been unlocked on machine 'DEV1'
				</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>http://gallery.technet.microsoft.com/1abd77a5-9c0b-4a2b-acef-90dbb2b84e85</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
</helpItems>
